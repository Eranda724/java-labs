import java.util.Scanner;

public class SearchAndSort {
    private int[] array;

    public SearchAndSort(int[] array) {
        this.array = array;
    }

    // Linear Search
    public int linearSearch(int target) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] == target) {
                return i; // Return the index where the target is found
            }
        }
        return -1; // Return -1 if the target is not found
    }

    // Bubble Sort
    public void bubbleSort() {
        int n = array.length;
        boolean swapped;

        for (int i = 0; i < n - 1; i++) {
            swapped = false;

            for (int j = 0; j < n - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    // Swap array[j] and array[j + 1]
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                    swapped = true;
                }
            }

            // If no two elements were swapped in the inner loop, the array is already sorted
            if (!swapped) {
                break;
            }
        }
    }

    // Insertion Sort
    public void insertionSort() {
        int n = array.length;

        for (int i = 1; i < n; i++) {
            int key = array[i];
            int j = i - 1;

            // Move elements of array[0..i-1] that are greater than key
            // to one position ahead of their current position
            while (j >= 0 && array[j] > key) {
                array[j + 1] = array[j];
                j = j - 1;
            }
            array[j + 1] = key;
        }
    }

    // Selection Sort
    public void selectionSort() {
        int n = array.length;

        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;

            // Find the minimum element in the unsorted part of the array
            for (int j = i + 1; j < n; j++) {
                if (array[j] < array[minIndex]) {
                    minIndex = j;
                }
            }

            // Swap the found minimum element with the first element
            int temp = array[minIndex];
            array[minIndex] = array[i];
            array[i] = temp;
        }
    }

    public void printArray() {
        System.out.print("Array: ");
        for (int num : array) {
            System.out.print(num + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] arr = new int[8];

        System.out.println("Enter 8 elements for the array:");

        for (int i = 0; i < 8; i++) {
            System.out.print("Enter element " + (i + 1) + ": ");
            arr[i] = scanner.nextInt();
        }

        SearchAndSort searchAndSort = new SearchAndSort(arr);

        System.out.println("Original Array:");
        searchAndSort.printArray();

        System.out.print("Enter a number to search for: ");
        int target = scanner.nextInt();

        // Linear Search
        int linearSearchResult = searchAndSort.linearSearch(target);
        if (linearSearchResult != -1) {
            System.out.println("Linear Search: Found at index " + linearSearchResult);
        } else {
            System.out.println("Linear Search: Not found");
        }

        // Bubble Sort
        searchAndSort.bubbleSort();
        System.out.println("Bubble Sort:");
        searchAndSort.printArray();

        // Insertion Sort
        searchAndSort.insertionSort();
        System.out.println("Insertion Sort:");
        searchAndSort.printArray();

        // Selection Sort
        searchAndSort.selectionSort();
        System.out.println("Selection Sort:");
        searchAndSort.printArray();

        scanner.close();
    }
}
