import java.util.Scanner;

public class CustomHashTable {
    private static final int TABLE_SIZE = 256; // Assuming ASCII characters

    private LinkedList<CharacterFrequency>[] table;

    public CustomHashTable() {
        table = new LinkedList[TABLE_SIZE];
        for (int i = 0; i < TABLE_SIZE; i++) {
            table[i] = new LinkedList<>();
        }
    }

    public void put(char key) {
        int index = key % TABLE_SIZE;
        LinkedList<CharacterFrequency> list = table[index];

        for (CharacterFrequency cf : list) {
            if (cf.character == key) {
                cf.frequency++;
                return;
            }
        }

        list.add(new CharacterFrequency(key));
    }

    public CharacterFrequency get(char key) {
        int index = key % TABLE_SIZE;
        LinkedList<CharacterFrequency> list = table[index];

        for (CharacterFrequency cf : list) {
            if (cf.character == key) {
                return cf;
            }
        }

        return null;
    }

    public static class CharacterFrequency {
        char character;
        int frequency;

        public CharacterFrequency(char character) {
            this.character = character;
            this.frequency = 1;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String input = scanner.nextLine();
        scanner.close();

        CustomHashTable customHashTable = new CustomHashTable();

        for (char c : input.toCharArray()) {
            if (Character.isLetterOrDigit(c) || c == ' ' || c == '-' || c == '_' || c == '.') {
                customHashTable.put(c);
            }
        }

        char maxChar = ' ';
        int maxCount = 0;

        for (int i = 0; i < CustomHashTable.TABLE_SIZE; i++) {
            LinkedList<CustomHashTable.CharacterFrequency> list = customHashTable.table[i];

            for (CustomHashTable.CharacterFrequency cf : list) {
                if (cf.frequency > maxCount || (cf.frequency == maxCount && cf.character < maxChar)) {
                    maxChar = cf.character;
                    maxCount = cf.frequency;
                }
            }
        }

        System.out.println(maxChar + " " + maxCount);
    }
}
